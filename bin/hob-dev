#!/usr/bin/env node

import parseArgs from 'minimist'
import { resolve } from 'path'
import { existsSync } from 'fs'

import projectDir from '../lib/project-dir'
import startProcess from '../lib/start-process'
import generateClientConfig from '../lib/config/generate-client-config'

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    q: 'quick',
    h: 'help'
  },
  boolean: ['h', 'q', 'fresh-db']
})

if (argv.help) {
  console.log(`
    Description
      Runs the development application
    Usage
      $ hob dev

    Options
      --quick, -q   Skip any transpile steps
      --fresh-db    Resets the local database
  `)
  process.exit(0)
}

function wrapup() {
  // kick off server (express)
  startProcess({
    args: './server/',
    cwd: projectDir
  })
}

(function() {
  if (argv.quick) {
    if (argv['fresh-db']) {
      console.warn(`Can't run 'hob dev' with both '--quick' and '--fresh-db`)
      process.exit(1)
    }

    wrapup()
    return
  }

  // 1. transpile styles
  startProcess({
    args: ['../procs/stylus/prepare']
  }, code => {
    if (code !== 0) {
      process.exit(code)
    }

    // 2. generate client config file
    generateClientConfig()

    // 3.a. if --fresh-db set, then wipe db and re-init
    if (argv['fresh-db'] && process.env.NODE_ENV !== 'production') {
      if (!existsSync(resolve(projectDir, 'sql', `init-${NODE_ENV}.sql`))) {
        console.warn(`'hob dev --fresh-db' requires your project to have ./sql/init-${NODE_ENV}.sql`)
        process.exit(1)
      }

      startProcess({
        command: 'psql',
        args: [
          'postgres',
          '--username=conjure_admin',
          '-w',
          `--file="init-${NODE_ENV}.sql`
        ],
        cwd: resolve(projectDir, 'sql')
      }, code => {
        if (code !== 0) {
          process.exit(code)
        }

        // finally wrapup
        wrapup()
      })
      return
    }

    // 3.b. else wrapup
    wrapup()
  })
})()
