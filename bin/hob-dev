#!/usr/bin/env node

import parseArgs from 'minimist'
import { resolve } from 'path'
import { existsSync } from 'fs'

import projectDir from '../lib/project-dir'
import projectPackages from '../lib/project-packages'
import startProcess from '../lib/start-process'
import generateClientConfig from '../lib/config/generate-client-config'

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    q: 'quick',
    h: 'help'
  },
  boolean: ['h', 'q', 'fresh-db']
})

if (argv.help) {
  console.log(`
    Description
      Runs the development application
    Usage
      $ hob dev

    Options
      --quick, -q   Skip any transpile steps
      --fresh-db    Resets the local database
  `)
  process.exit(0)
}

const steps = {}

steps.prepareClient = function prepareClient(done) {
  if (!projectPackages.includes('next')) {
    return done()
  }

  let isFatal = false
  function fatalCondition(message) {
    isFatal = true
    console.warn(`⚠️\t${message}`)
  }

  ['react', 'react-dom'].forEach(dependency => {
    try {
      // When 'npm link' is used it checks the clone location. Not the project.
      require.resolve(dependency)
    } catch (err) {
      fatalCondition(`The module '${dependency}' was not found. Hob requires that you include it in 'dependencies' of your 'package.json'. To add it, run 'npm install --save ${dependency}'`)
    }
  })
  if (isFatal) {
    process.exit(1)
  }

  startProcess({
    args: ['../procs/stylus/prepare']
  }, code => {
    if (code !== 0) {
      process.exit(code)
    }

    generateClientConfig()
    done()
  })
}

steps.resetDb = function resetDb(done) {
  const { NODE_ENV } = process.env

  if (!argv['fresh-db'] || NODE_ENV === 'production') {
    return done()
  }

  const sqlDir =resolve(projectDir, 'sql')

  if (!existsSync(resolve(sqlDir, `init-${NODE_ENV}.sql`))) {
    console.warn(`'hob dev --fresh-db' requires your project to have ./sql/init-${NODE_ENV}.sql`)
    process.exit(1)
  }

  const hobConfig = require('../lib/get-config')

  if (!hobConfig.fullConfig.database || !hobConfig.fullConfig.database.pg || !hobConfig.fullConfig.database.pg.user) {
    console.warn(`⚠️\tHob expects fullConfig.database.pg.user (in .hob/config.js) to run databse init script`)
    process.exit(1)
  }

  startProcess({
    command: 'psql',
    args: [
      'postgres',
      `--username=${hobConfig.fullConfig.database.pg.user}`,
      '-w',
      `--file="init-${NODE_ENV}.sql"`
    ],
    cwd: sqlDir
  }, code => {
    if (code !== 0) {
      process.exit(code)
    }

    done()
  })
}

steps.start = function start() {
  if (projectPackages.includes('next')) {
    // kick off server (express)
    startProcess({
      args: ['./server'],
      cwd: projectDir
    })
    return
  }

  // not using next, so will use nodemon
  startProcess({
    command: 'bash',
    args: ['./node_modules/@conjurelabs/hob/dist/bash/run-and-watch.sh'],
    cwd: projectDir
  })
}

;(function() {
  if (argv.quick) {
    if (argv['fresh-db']) {
      console.warn(`Can't run 'hob dev' with both '--quick' and '--fresh-db`)
      process.exit(1)
    }

    return steps.start()
  }

  steps.prepareClient(() => {
    steps.resetDb(() => {
      steps.start()
    })
  })
})()
