#!/usr/bin/env node

/*
  Mostly a clone of https://github.com/zeit/next.js/blob/canary/bin/next
 */

import { existsSync } from 'fs'
import { resolve, join } from 'path'

import pkg from '../../package.json'
import startProcess from './lib/start-process'

if (pkg.peerDependencies) {
  Object.keys(pkg.peerDependencies).forEach(dependency => {
    try {
      // When 'npm link' is used it checks the clone location. Not the project.
      require.resolve(dependency)
    } catch (err) {
      console.warn(`The module '${dependency}' was not found. Hob requires that you include it in 'dependencies' of your 'package.json'. To add it, run 'npm install --save ${dependency}'`)
    }
  })
}

if (!existsSync(resolve(__dirname, '../../', '.hob'))) {
  console.warn('.hob directory is needed - add a .hob dir to the base dir of your project')
}
if (!existsSync(resolve(__dirname, '../../', '.hob', '.profile'))) {
  console.warn('.profile (environment config) not found - you should add a .profile to the .hob dir of your project')
}
if (!existsSync(resolve(__dirname, '../../', '.hob', 'client-config-keys'))) {
  console.warn('a client-config-keys file, in .hob dir, is needed to determine what keys to carry to the client')
}

const defaultCommand = 'dev'
const commands = new Set([
  'init',
  'build',
  'start',
  defaultCommand
])

let cmd = process.argv[2]
let args = []
let nodeArgs = []

if (new Set(['--version', '-v']).has(cmd)) {
  console.log(`hob v${pkg.version}`)
  process.exit(0)
}

if (new Set(['--help', '-h']).has(cmd)) {
  console.log(`
    Usage
      $ hob <command>
    Available commands
      ${Array.from(commands).join(', ')}
    For more information run a command with the --help flag
      $ hob init --help
  `)
  process.exit(0)
}

if (commands.has(cmd)) {
  args = process.argv.slice(3)
} else {
  cmd = defaultCommand
  args = process.argv.slice(2)
}

const defaultEnv = cmd === 'dev' ? 'development' : 'production'
process.env.NODE_ENV = process.env.NODE_ENV || defaultEnv

const bin = join(__dirname, 'hob-' + cmd)

startProcess({
  args: [...nodeArgs, ...[bin], ...args]
})
