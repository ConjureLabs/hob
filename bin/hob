#!/usr/bin/env node

/*
  Mostly a clone of https://github.com/zeit/next.js/blob/canary/bin/next
 */

import { existsSync } from 'fs'
import { resolve, join } from 'path'
import { spawn } from 'child_process'
import source from 'shell-source'

import projectDir from '../lib/project-dir'

import pkg from '../../package.json'
import startProcess from '../lib/start-process'

let isFatal = false
function fatalCondition(message) {
  isFatal = true
  console.warn(`⚠️\t${message}`)
}

if (pkg.peerDependencies) {
  Object.keys(pkg.peerDependencies).forEach(dependency => {
    try {
      // When 'npm link' is used it checks the clone location. Not the project.
      require.resolve(dependency)
    } catch (err) {
      fatalCondition(`The module '${dependency}' was not found. Hob requires that you include it in 'dependencies' of your 'package.json'. To add it, run 'npm install --save ${dependency}'`)
    }
  })
}

if (!existsSync(resolve(projectDir, '.hob'))) {
  fatalCondition('.hob directory is needed - add a .hob dir to the base dir of your project')
}
if (!existsSync(resolve(projectDir, '.hob', '.env'))) {
  fatalCondition('.env (environment config) not found - you should add a .env to the .hob dir of your project')
}

if (isFatal) {
  process.exit(1)
}

source(resolve(projectDir, '.hob', '.env'), err => {
  if (err) {
    throw err
  }

  const defaultCommand = 'dev'
  const commands = new Set([
    'build',
    'compile',
    'lint',
    'start',
    defaultCommand
  ])

  let cmd = process.argv[2]
  let args = []

  if (new Set(['--version', '-v']).has(cmd)) {
    console.log(`hob v${pkg.version}`)
    process.exit(0)
  }

  if (new Set(['--help', '-h']).has(cmd)) {
    console.log(`
      Usage
        $ hob <command>
      Available commands
        ${Array.from(commands).join(', ')}
      For more information run a command with the --help flag
        $ hob init --help
    `)
    process.exit(0)
  }

  if (commands.has(cmd)) {
    args = process.argv.slice(3)
  } else {
    cmd = defaultCommand
    args = process.argv.slice(2)
  }

  const defaultEnv = cmd === 'dev' ? 'development' : 'production'
  process.env.NODE_ENV = process.env.NODE_ENV || defaultEnv

  const bin = join(__dirname, 'hob-' + cmd)

  startProcess({
    args: [bin, ...args]
  })
})
