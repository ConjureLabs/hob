#!/usr/bin/env node


/*
  Mostly a clone of https://github.com/zeit/next.js/blob/canary/bin/next
 */

import { join } from 'path';
import { spawn } from 'cross-spawn';

import pkg from '../../package.json';

if (pkg.peerDependencies) {
  Object.keys(pkg.peerDependencies).forEach(dependency => {
    try {
      // When 'npm link' is used it checks the clone location. Not the project.
      require.resolve(dependency);
    } catch (err) {
      console.warn(`The module '${dependency}' was not found. Hob requires that you include it in 'dependencies' of your 'package.json'. To add it, run 'npm install --save ${dependency}'`);
    }
  });
}

const defaultCommand = 'dev';
const commands = new Set(['init', 'build', 'start', defaultCommand]);

let cmd = process.argv[2];
let args = [];
let nodeArgs = [];

if (new Set(['--version', '-v']).has(cmd)) {
  console.log(`hob v${pkg.version}`);
  process.exit(0);
}

if (new Set(['--help', '-h']).has(cmd)) {
  console.log(`
    Usage
      $ hob <command>
    Available commands
      ${Array.from(commands).join(', ')}
    For more information run a command with the --help flag
      $ hob init --help
  `);
  process.exit(0);
}

if (commands.has(cmd)) {
  args = process.argv.slice(3);
} else {
  cmd = defaultCommand;
  args = process.argv.slice(2);
}

const defaultEnv = cmd === 'dev' ? 'development' : 'production';
process.env.NODE_ENV = process.env.NODE_ENV || defaultEnv;

const bin = join(__dirname, 'hob-' + cmd);

const startProcess = () => {
  const proc = spawn('node', [...nodeArgs, ...[bin], ...args], { stdio: 'inherit' });
  proc.on('close', (code, signal) => {
    if (code !== null) {
      process.exit(code);
    }
    if (signal) {
      if (signal === 'SIGKILL') {
        process.exit(137);
      }
      console.log(`got signal ${signal}, exiting`);
      process.exit(1);
    }
    process.exit(0);
  });
  proc.on('error', err => {
    console.error(err);
    process.exit(1);
  });
  return proc;
};
startProcess();