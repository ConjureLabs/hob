#!/usr/bin/env node
"use strict";

var _fs = require("fs");

var _path = require("path");

var _package = _interopRequireDefault(require("../../package.json"));

var _startProcess = _interopRequireDefault(require("./lib/start-process"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

if (_package.default.peerDependencies) {
  Object.keys(_package.default.peerDependencies).forEach(function (dependency) {
    try {
      // When 'npm link' is used it checks the clone location. Not the project.
      require.resolve(dependency);
    } catch (err) {
      console.warn("The module '".concat(dependency, "' was not found. Hob requires that you include it in 'dependencies' of your 'package.json'. To add it, run 'npm install --save ").concat(dependency, "'"));
    }
  });
}

if (!(0, _fs.existsSync)((0, _path.resolve)(__dirname, '../../', '.hob'))) {
  console.warn('.hob directory is needed - add a .hob dir to the base dir of your project');
}

if (!(0, _fs.existsSync)((0, _path.resolve)(__dirname, '../../', '.hob', '.profile'))) {
  console.warn('.profile (environment config) not found - you should add a .profile to the .hob dir of your project');
}

if (!(0, _fs.existsSync)((0, _path.resolve)(__dirname, '../../', '.hob', 'client-config-keys'))) {
  console.warn('a client-config-keys file, in .hob dir, is needed to determine what keys to carry to the client');
}

var defaultCommand = 'dev';
var commands = new Set(['init', 'build', 'start', defaultCommand]);
var cmd = process.argv[2];
var args = [];
var nodeArgs = [];

if (new Set(['--version', '-v']).has(cmd)) {
  console.log("hob v".concat(_package.default.version));
  process.exit(0);
}

if (new Set(['--help', '-h']).has(cmd)) {
  console.log("\n    Usage\n      $ hob <command>\n    Available commands\n      ".concat(Array.from(commands).join(', '), "\n    For more information run a command with the --help flag\n      $ hob init --help\n  "));
  process.exit(0);
}

if (commands.has(cmd)) {
  args = process.argv.slice(3);
} else {
  cmd = defaultCommand;
  args = process.argv.slice(2);
}

var defaultEnv = cmd === 'dev' ? 'development' : 'production';
process.env.NODE_ENV = process.env.NODE_ENV || defaultEnv;
var bin = (0, _path.join)(__dirname, 'hob-' + cmd);
(0, _startProcess.default)({
  args: nodeArgs.concat([bin], _toConsumableArray(args))
});